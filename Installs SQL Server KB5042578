<#
.SYNOPSIS
  Installs SQL Server KB5042578 (or relevant KB) for remediation
  For MECM/Intune deployment
#>

$KBID = "5042578"
$DownloadURL = "https://catalog.s.download.windowsupdate.com/c/msdownload/update/software/updt/2024/09/sqlserver2022-kb5042578-x64_d4e3d93b.msu"
$LocalPath = "$env:TEMP\SQLServer_$KBID.msu"
$LogFile = "C:\Windows\Temp\SQLServer_KB$KBID.log"

Write-Output "Checking if KB$KBID is already installed..."
if (Get-HotFix -Id "KB$KBID" -ErrorAction SilentlyContinue) {
    Write-Output "KB$KBID already installed."
    exit 0
}

Write-Output "Downloading KB$KBID..."
Invoke-WebRequest -Uri $DownloadURL -OutFile $LocalPath

Write-Output "Installing KB$KBID..."
Start-Process "wusa.exe" -ArgumentList "`"$LocalPath`" /quiet /norestart /log:$LogFile" -Wait

# Verify install
Start-Sleep -Seconds 30
if (Get-HotFix -Id "KB$KBID" -ErrorAction SilentlyContinue) {
    Write-Output "KB$KBID installed successfully."
    exit 0
} else {
    Write-Output "KB$KBID installation failed."
    exit 1
}

Remediation for LND-SVR1: 10.1.10.35

Here’s a PowerShell script for Windows that:
Detects the installed Docker Desktop version.


Compares it to the minimum secure version (4.34.2).


Downloads the latest installer from Docker’s official site (if outdated).


Performs a silent upgrade.


Logs results for compliance (exit codes: 0 = compliant, 2 = upgraded, 1 = error).
<#
.SYNOPSIS
  Remediates "Docker Desktop < 4.34.2 Multiple Vulnerabilities" on Windows.

.DESCRIPTION
  - Checks installed Docker Desktop version.
  - If < 4.34.2, downloads latest installer from Docker.
  - Performs a silent upgrade.
  - Outputs JSON summary for Intune/MECM compliance.

.NOTES
  Run with Administrator rights.
#>

param(
  [Version]$MinimumVersion = [Version]"4.34.2",
  [string]$DownloadUrl = "https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe",
  [string]$InstallerPath = "$env:TEMP\DockerDesktopInstaller.exe",
  [switch]$WhatIfOnly
)

function Write-Log {
  param([string]$Message,[string]$Level="INFO")
  $ts = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
  $line = "[$ts][$Level] $Message"
  Write-Host $line
  Add-Content -Path "$env:ProgramData\docker-desktop-remediation.log" -Value $line
}

function Get-DockerDesktopVersion {
  $key = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
  $apps = Get-ChildItem $key, "$key\WOW6432Node" -ErrorAction SilentlyContinue |
    Get-ItemProperty |
    Where-Object { $_.DisplayName -like "Docker Desktop*" }
  if ($apps) {
    try { return [Version]($apps.DisplayVersion) } catch { return $null }
  }
  return $null
}

# ---- Main ----
$summary = [ordered]@{
  Package        = "Docker Desktop"
  MinimumVersion = $MinimumVersion.ToString()
  Installed      = $null
  Action         = "None"
  Result         = "Unknown"
  Timestamp      = (Get-Date).ToString("o")
}

try {
  $installed = Get-DockerDesktopVersion
  $summary.Installed = $installed?.ToString()

  if (-not $installed) {
    Write-Log "Docker Desktop not detected."
    if ($WhatIfOnly) {
      Write-Log "WHATIF: Would install Docker Desktop from $DownloadUrl"
      $summary.Action = "WouldInstall"
      $summary.Result = "WhatIf"
      $summary | ConvertTo-Json -Depth 3
      exit 0
    }
    Write-Log "Downloading Docker Desktop installer..."
    Invoke-WebRequest -Uri $DownloadUrl -OutFile $InstallerPath -UseBasicParsing
    Write-Log "Installing silently..."
    Start-Process -FilePath $InstallerPath -ArgumentList "install --quiet" -Wait
    $summary.Action = "Installed"
    $summary.Result = "Remediated"
    $summary.Installed = (Get-DockerDesktopVersion)?.ToString()
    $summary | ConvertTo-Json -Depth 3
    exit 2
  }

  if ($installed -lt $MinimumVersion) {
    Write-Log "Docker Desktop $installed is less than required $MinimumVersion"
    if ($WhatIfOnly) {
      Write-Log "WHATIF: Would upgrade Docker Desktop to >= $MinimumVersion"
      $summary.Action = "WouldUpgrade"
      $summary.Result = "WhatIf"
      $summary | ConvertTo-Json -Depth 3
      exit 0
    }
    Write-Log "Downloading latest Docker Desktop installer..."
    Invoke-WebRequest -Uri $DownloadUrl -OutFile $InstallerPath -UseBasicParsing
    Write-Log "Running silent upgrade..."
    Start-Process -FilePath $InstallerPath -ArgumentList "install --quiet" -Wait
    $newVersion = Get-DockerDesktopVersion
    $summary.Installed = $newVersion?.ToString()
    if ($newVersion -ge $MinimumVersion) {
      Write-Log "Upgrade successful: now at $newVersion"
      $summary.Action = "Upgraded"
      $summary.Result = "Remediated"
      $summary | ConvertTo-Json -Depth 3
      exit 2
    } else {
      throw "Upgrade attempted but version check still < $MinimumVersion"
    }
  } else {
    Write-Log "Compliant: Docker Desktop $installed >= $MinimumVersion"
    $summary.Action = "None"
    $summary.Result = "Compliant"
    $summary | ConvertTo-Json -Depth 3
    exit 0
  }

} catch {
  Write-Log $_.ToString() "ERROR"
  $summary.Action = "Failed"
  $summary.Result = "Error"
  $summary | ConvertTo-Json -Depth 3
  exit 1
}

Note: Script failed, had to log in to Docker and update software manually..
